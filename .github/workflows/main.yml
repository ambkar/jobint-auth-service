name: CI / CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}
  IMAGE_TAG: ${{ github.sha }}

# ───────────── 1. Build & Push ─────────────
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions: {contents: read, packages: write}

    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build + push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.IMAGE_NAME }}:latest

# ───────────── 2. Test (заглушка) ─────────────
  test:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - run: echo "tests passed"

# ───────────── 3. Deploy ─────────────
  deploy:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      # ── SSH-ключ ──
      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}

      # ─── Init DB (idempotent) ───
      - name: Init DB (idempotent)
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          PGUSER: jobint_user            # тот же, что в compose
        run: |
          ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST <<EOSSH
            set -euo pipefail
            cd /var/www/jobint.ru/auth-service

            docker compose exec -T db psql -U $PGUSER <<'SQL'
            -- создаём роль и БД, если их ещё нет
            DO \$\$
            BEGIN
              IF NOT EXISTS (
                SELECT FROM pg_roles WHERE rolname = 'jobint_user'
              ) THEN
                CREATE ROLE jobint_user LOGIN PASSWORD 'Karen_2003' SUPERUSER;
              END IF;
            END
            \$\$;

            DO \$\$
            BEGIN
              IF NOT EXISTS (
                SELECT FROM pg_database WHERE datname = 'jobint'
              ) THEN
                CREATE DATABASE jobint OWNER jobint_user;
              END IF;
            END
            \$\$;

            GRANT ALL PRIVILEGES ON DATABASE jobint TO jobint_user;
            SQL
          EOSSH


      # ── pull образ + перезапуск ──
      - name: Deploy containers
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
        run: |
          ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST <<'EOSSH'
            set -euo pipefail
            PROJECT_DIR="/var/www/jobint.ru/auth-service"
            REPO="https://github.com/ambkar/jobint-auth-service.git"

            # code update
            if [ ! -d "$PROJECT_DIR/.git" ]; then
              git clone --depth 1 --branch main "$REPO" "$PROJECT_DIR"
            else
              git -C "$PROJECT_DIR" pull --ff-only
            fi

            docker pull $IMAGE_NAME:latest
            cd "$PROJECT_DIR"
            docker compose up -d --remove-orphans
          EOSSH
