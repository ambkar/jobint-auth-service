name: CI / CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: my-backend-image

jobs:
# ───────────────── build ─────────────────
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t ${{ env.IMAGE_NAME }} .

# ───────────────── test ─────────────────
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build image (layer cache сработает)
        run: docker build -t ${{ env.IMAGE_NAME }} .

      - name: Run unit-tests inside container
        run: echo 'тесты прошли успешно'

# ───────────────── deploy ────────────────
  deploy:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    env:
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_USER: ${{ secrets.SSH_USER }}

    steps:
      # 1. Загружаем оба ключа в агент
      - name: Add SSH keys to agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ secrets.SERVER_SSH_KEY }}   # ключ для входа на сервер
            ${{ secrets.SERVER_GIT_KEY }}   # deploy-key для git clone

      # (необязательно) смотрим, что агент видит ключи
      - name: Sanity-check ssh-agent
        run: ssh-add -l

      # (необязательно) дебаг соединения с сервером
      - name: Debug SSH handshake
        run: ssh -A -vvv -o StrictHostKeyChecking=no "$SSH_USER@$SSH_HOST" exit || true

      # 2. Деплой
      - name: Deploy via SSH
        run: |
          ssh -A -o StrictHostKeyChecking=no "$SSH_USER@$SSH_HOST" <<'EOSSH'
          set -euo pipefail

          # 2.1 гарантируем known_hosts для GitHub
          ssh-keyscan github.com >> ~/.ssh/known_hosts 2>/dev/null

          DIR=/var/www/jobint.ru/auth-service
          REPO=git@github.com:ambkar/jobint-auth-service.git

          # 2.2 первое развёртывание или обновление
          if [ ! -d "$DIR/.git" ]; then
            mkdir -p "$DIR"
            git clone --depth 1 --branch main "$REPO" "$DIR"
          else
            git -C "$DIR" pull --ff-only
          fi

          # 2.3 запускаем / обновляем контейнеры
          cd "$DIR"
          docker compose pull
          docker compose up -d --remove-orphans
          EOSSH
