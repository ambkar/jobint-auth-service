name: CI / CD

# ────────────── триггеры ──────────────
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# общий префикс образа
env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}
  IMAGE_TAG: ${{ github.sha }}

# ────────────── JOBS ──────────────
jobs:
# ───────────────────── 1. BUILD & PUSH ─────────────────────
  build-and-push:
    runs-on: ubuntu-latest
    permissions:                 # push в GHCR
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.IMAGE_NAME }}:latest

# ───────────────────── 2. TEST (заглушка) ─────────────────────
  test:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - run: echo "✓ tests passed"

# ───────────────────── 3. DEPLOY ─────────────────────
  deploy:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Start SSH-agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy on server
        env:
          SSH_HOST:  ${{ secrets.SSH_HOST }}
          SSH_USER:  ${{ secrets.SSH_USER }}
          IMAGE_TAG: ${{ env.IMAGE_NAME }}:latest     # ghcr.io/…/jobint-auth-service:latest
        run: |
          ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST <<EOSSH
            set -euo pipefail

            # ─── 1. idempotent-инициализация БД ───
            cd /var/www/jobint.ru/auth-service
            cat <<'EOSQL' | docker compose exec -T db psql -U jobint_user -d postgres
              DO $$
              BEGIN
                IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = 'jobint_user') THEN
                  CREATE ROLE jobint_user LOGIN PASSWORD 'Karen_2003' SUPERUSER;
                END IF;
              END
              $$;

              DO $$
              BEGIN
                IF NOT EXISTS (SELECT 1 FROM pg_database WHERE datname = 'jobint') THEN
                  CREATE DATABASE jobint OWNER jobint_user;
                END IF;
              END
              $$;

              GRANT ALL PRIVILEGES ON DATABASE jobint TO jobint_user;
            EOSQL

            # ─── 2. обновляем код ───
            REPO="https://github.com/ambkar/jobint-auth-service.git"
            if [ ! -d ".git" ]; then
              git clone --depth 1 --branch main "$REPO" .
            else
              git pull --ff-only
            fi

            # ─── 3. тянем образ и перезапускаем стэк ───
            docker pull $IMAGE_TAG
            docker compose up -d --remove-orphans
          EOSSH